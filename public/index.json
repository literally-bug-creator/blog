[{"content":"Terminology Language grammar - a set of rules, which defines how to correctly form language constructions. Syntax - a part of grammar, which defines only an order of elements in the sentence, sentence structure, available element combinations. Abstract syntax tree (AST) - a tree-like data structure, which represents sentence syntax structure or expressions according to language grammar. Terminal expressions are the simplest language elements, which can no longer be decomposed into smaller parts. Non-terminal expression - a complex element, which can be decomposed into other expressions (terminal and/or non-terminal). \u0026ldquo;to interpret\u0026rdquo;, in the pattern context, means to analyze and execute commands or expressions, which are written in a specific language. Definition Interpreter - it\u0026rsquo;s a behaviour design pattern, which describes a way to represent language grammar by a class system, where each class is responsible for only one grammar rule, language sentences are interpreted by building and visiting an abstract syntax tree from instances of these classes.\nTerms of use You have a special language (set of commands or rules), which needs to be executed in the program, and these commands can be decomposed into simple parts and represented as a tree. Language grammar is easy. If many rules exist, you need to create a lot of classes, code will be complex and hard to maintain. Performance is not critical. Expression can include a lot of copies of other expressions, which may cause performance issues. Structure AbstractExpression - abstract expression. Defines a common (for all nodes of abstract syntax tree) expressions handling interface. TerminalExpression - terminal expression which implements terminal symbols handling interface. Each type of terminal symbol needs a class. NonterminalExpression - non-terminal expression which implements non-terminal symbol handling interface. These handling operations call sub-expressions. Context - context which is global with regard to interpreter information and is used by all nodes for data exchange and state saving. Client - client which creates (or receives already built) expression tree and runs the interpretation. classDiagram class AbstractExpression { \u003c\u003e +interpret(context: Context) } class TerminalExpression { +interpret(context: Context) } class NonterminalExpression { -expressions: List~AbstractExpression~ +interpret(context: Context) } class Context { -globalInfo: Map +get(key: String) +set(key: String, value: Object) } class Client { +buildAST(): AbstractExpression +interpret(expression: AbstractExpression) } AbstractExpression \u003c|-- TerminalExpression AbstractExpression \u003c|-- NonterminalExpression NonterminalExpression *-- AbstractExpression : contains Client --\u003e AbstractExpression : creates and uses AbstractExpression --\u003e Context : uses TerminalExpression --\u003e Context : uses NonterminalExpression --\u003e Context : uses Pipeline Client creates (or receives already built) sentence tree, where nodes include objects of terminal and non-terminal classes. Client prepares context with initial data and runs tree handling. Non-terminal expressions handle their sub-expressions by calling their handling methods. Terminal expressions execute concrete operations and end the chain of processing. Disadvantages Hard to maintain as the grammar grows. Performance - creating a lot of objects causes performance issues. Advantages It\u0026rsquo;s easy to add new rules, just add a new class. Simple implementation - each class decides only its own task. Transparent structure - code represents the grammar structure. ","permalink":"https://blog.bugme.tech/posts/interpreter-pattern/","summary":"\u003ch1 id=\"terminology\"\u003eTerminology\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eLanguage grammar - a set of rules, which defines how to correctly form language constructions.\u003c/li\u003e\n\u003cli\u003eSyntax - a part of grammar, which defines only an order of elements in the sentence, sentence structure, available element combinations.\u003c/li\u003e\n\u003cli\u003eAbstract syntax tree (AST) - a tree-like data structure, which represents sentence syntax structure or expressions according to language grammar.\u003c/li\u003e\n\u003cli\u003eTerminal expressions are the simplest language elements, which can no longer be decomposed into smaller parts.\u003c/li\u003e\n\u003cli\u003eNon-terminal expression - a complex element, which can be decomposed into other expressions (terminal and/or non-terminal).\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;to interpret\u0026rdquo;, in the pattern context, means to \u003cstrong\u003eanalyze and execute\u003c/strong\u003e commands or expressions, which are written in a specific language.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"definition\"\u003eDefinition\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eInterpreter\u003c/strong\u003e - it\u0026rsquo;s a behaviour design pattern, which describes a way to represent language grammar by a class system, where each class is responsible for only one grammar rule, language sentences are interpreted by building and visiting an abstract syntax tree from instances of these classes.\u003c/p\u003e","title":"Interpreter Pattern"}]